{"version":3,"sources":["components/Todo/todo.module.css","components/App/app.module.css","components/Todos/todos.module.css","components/Todo/todo.js","components/Todos/todos.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","data","userId","id","title","completed","className","useState","done","setDone","clsx","classes","todo","notDone","onClick","idContainer","Todos","setData","useEffect","fetch","then","response","json","todoGrid","map","key","App","app","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAc,0BAA0B,MAAQ,oBAAoB,KAAO,mBAAmB,QAAU,wB,iBCApJD,EAAOC,QAAU,CAAC,OAAS,oBAAoB,IAAM,mB,mBCArDD,EAAOC,QAAU,CAAC,SAAW,0B,6JC4BdC,EAzBF,SAAC,GAA2D,IAAD,IAAxDC,KAAQC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,UAAaC,EAAgB,EAAhBA,UAAgB,EAC9CC,mBAASF,GADqC,mBAC/DG,EAD+D,KACzDC,EADyD,KAOtE,OACE,yBACEH,UAAWI,YACTC,IAAQC,KACRJ,EAAOG,IAAQH,KAAOG,IAAQE,QAC9BP,GAEFQ,QAXgB,WAClBL,GAAQ,SAACD,GAAD,OAAWA,OAYjB,yBAAKF,UAAWK,IAAQI,aACtB,yCAAiBb,GACjB,uCAAeC,IAEjB,yBAAKG,UAAWK,IAAQP,OAAQA,K,gBCFvBY,EAlBD,WAAO,IAAD,EACMT,mBAAS,IADf,mBACXN,EADW,KACLgB,EADK,KASlB,OANAC,qBAAU,WACRC,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACnB,GAAD,OAAUgB,EAAQhB,QACzB,IAGD,yBAAKK,UAAWK,IAAQY,UACrBtB,EAAKuB,KAAI,SAACZ,GAAD,OACR,kBAAC,EAAD,CAAMa,IAAKb,EAAKT,GAAIF,KAAMW,S,gBCLnBc,EAPH,kBACV,yBAAKpB,UAAWK,IAAQgB,KACtB,wBAAIrB,UAAWK,IAAQiB,QAAvB,gBACA,kBAAC,EAAD,QCKEC,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThB,MAAK,SAAAqB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,iBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,iBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtClB,MAAMiB,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5B3C,MAAK,SAAAC,GAEJ,IAAM2C,EAAc3C,EAAS0C,QAAQE,IAAI,gBAEnB,MAApB5C,EAAS6C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMhD,MAAK,SAAAqB,GACjCA,EAAa4B,aAAajD,MAAK,WAC7BW,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMhD,MAAK,WACjC4B,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.9bb4ab6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"todo_todo__3PXbm\",\"idContainer\":\"todo_idContainer__L_4hQ\",\"title\":\"todo_title__1HLNz\",\"done\":\"todo_done__3qK3t\",\"notDone\":\"todo_notDone__1HzBm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"app_header__3Zsi8\",\"app\":\"app_app__1JKho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoGrid\":\"todos_todoGrid__2mqjs\"};","import React, { useState } from 'react';\r\nimport classes from './todo.module.css';\r\nimport clsx from 'clsx';\r\n\r\nconst Todo = ({ data: { userId, id, title, completed }, className }) => {\r\n  const [done, setDone] = useState(completed);\r\n\r\n  const handleClick = () => {\r\n    setDone((done) => !done);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        classes.todo,\r\n        done ? classes.done : classes.notDone,\r\n        className,\r\n      )}\r\n      onClick={handleClick}\r\n    >\r\n      <div className={classes.idContainer}>\r\n        <div>USER:&nbsp;{userId}</div>\r\n        <div>ID:&nbsp;{id}</div>\r\n      </div>\r\n      <div className={classes.title}>{title}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Todo from 'components/Todo';\r\nimport classes from './todos.module.css';\r\n\r\nconst Todos = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/todos/')\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data));\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.todoGrid}>\r\n      {data.map((todo) => (\r\n        <Todo key={todo.id} data={todo} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport Todos from 'components/Todos';\r\nimport classes from './app.module.css';\r\n\r\nconst App = () => (\r\n  <div className={classes.app}>\r\n    <h1 className={classes.header}>My Todo List</h1>\r\n    <Todos />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}